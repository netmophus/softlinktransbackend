import City from "../models/City.js";
import ActivityLog from "../models/ActivityLog.js";

// ‚úÖ **Cr√©er une nouvelle ville**
export const createCity = async (req, res) => {
  try {
    const { name, region } = req.body;

    if (!name || !region) {
      return res.status(400).json({ msg: "Veuillez fournir le nom et la r√©gion de la ville." });
    }

    // V√©rifier si la ville existe d√©j√†
    const existingCity = await City.findOne({ name: name.trim() });
    if (existingCity) {
      return res.status(400).json({ msg: "Cette ville existe d√©j√†." });
    }

    const newCity = new City({ name: name.trim(), region: region.trim() });
    await newCity.save();


     // üîç Journaliser la cr√©ation de la ville dans ActivityLog
     await ActivityLog.create({
      userId: req.userId, // ou autre identifiant de l'utilisateur connect√©
      action: "Cr√©ation de ville",
      details: `Ville cr√©√©e : ${name}, R√©gion : ${region}`
    });

    return res.status(201).json({ msg: "Ville cr√©√©e avec succ√®s.", city: newCity });

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de la ville :", error);
    return res.status(500).json({ msg: "Erreur du serveur." });
  }
};

// ‚úÖ **R√©cup√©rer toutes les villes**
export const getCities = async (req, res) => {
  try {
    const cities = await City.find().sort({ name: 1 }); // Trier par ordre alphab√©tique
    return res.status(200).json(cities);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des villes :", error);
    return res.status(500).json({ msg: "Erreur du serveur." });
  }
};
