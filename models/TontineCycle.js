// import mongoose from "mongoose";

// const TontineCycleSchema = new mongoose.Schema({
//   tontine: { type: mongoose.Schema.Types.ObjectId, ref: "Tontine", required: true }, // ðŸ”— RÃ©fÃ©rence Ã  la tontine
//   cycleNumber: { type: Number, required: true }, // ðŸ”¢ NumÃ©ro du cycle
//   dueDate: { type: Date, required: true }, // ðŸ“… Date limite du cycle
//   isCompleted: { type: Boolean, default: false }, // âœ… Indique si le cycle est terminÃ©
//   createdAt: { type: Date, default: Date.now }, // ðŸ“Œ Date de crÃ©ation du cycle
// });

// export default mongoose.model("TontineCycle", TontineCycleSchema);




import mongoose from "mongoose";

const TontineCycleSchema = new mongoose.Schema({
  tontine: { type: mongoose.Schema.Types.ObjectId, ref: "Tontine", required: true }, // ðŸ”— RÃ©fÃ©rence Ã  la tontine
  cycleNumber: { type: Number, required: true }, // ðŸ”¢ NumÃ©ro du cycle
  dueDate: { type: Date, required: true }, // ðŸ“… Date limite du cycle
  isCompleted: { type: Boolean, default: false }, // âœ… Indique si le cycle est terminÃ©

  // âœ… Ajout : Suivi des paiements liÃ©s au cycle
  payments: [{ type: mongoose.Schema.Types.ObjectId, ref: "TontinePayment" }], 

  // âœ… Ajout : Ã‰tat du cycle
  status: { 
    type: String, 
    enum: ["pending", "in_progress", "completed"], 
    default: "pending" 
  }, 

  // âœ… Ajout : BÃ©nÃ©ficiaire du cycle
  beneficiary: { type: mongoose.Schema.Types.ObjectId, ref: "User" }, 

  createdAt: { type: Date, default: Date.now }, // ðŸ“Œ Date de crÃ©ation du cycle
});

export default mongoose.model("TontineCycle", TontineCycleSchema);
