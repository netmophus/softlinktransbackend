



import express from "express";
import { authenticateUser } from "../middleware/auth.js";
import { authorizeRoles } from "../middleware/role.js";
import {
  createInterCityTransfer,
  getUserInterCityTransfers,
  updateInterCityTransfer,     // üî• (nouvelle version renomm√©e)
  cancelInterCityTransfer,     // üî• (pour l'annulation simple)
  autoRefundInterCityTransfer, // üî• ("me renvoyer √† moi-m√™me")
  
} from "../controllers/userController.js";
import User from "../models/User.js";

const router = express.Router();

// ‚úÖ Cr√©ation d'un transfert interville par un utilisateur mobile
router.post(
  "/intercitytransfer",
  authenticateUser,
  authorizeRoles("user"),
  createInterCityTransfer
);

// ‚úÖ R√©cup√©ration du solde virtuel d'un utilisateur
router.get("/user/:id/balance", authenticateUser, async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ msg: "Utilisateur non trouv√©." });
    }
    res.json({ balance: user.virtualAccount.balance });
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration du solde :", error);
    res.status(500).json({ msg: "Erreur du serveur." });
  }
});

// ‚úÖ Historique des transferts pour l'utilisateur connect√©
router.get(
  "/transfer/history",
  authenticateUser,
  authorizeRoles("user"),
  getUserInterCityTransfers
);

// ‚úÖ Modification de la ville de retrait (ou autres champs) d‚Äôun transfert (avant retrait)
router.put(
  "/transfer/update/:transferId",
  authenticateUser,
  authorizeRoles("user"),
  updateInterCityTransfer // <-- c'est bien la fonction qui g√®re l'impact caisse
);

// ‚úÖ Annulation classique d‚Äôun transfert (avant retrait)
router.post(
  "/transfer/cancel/:transferId",
  authenticateUser,
  authorizeRoles("user"),
  cancelInterCityTransfer
);

// ‚úÖ Reversement automatique ("me renvoyer √† moi-m√™me" depuis l‚Äôapp mobile)
router.post(
  "/transfer/refund/:transferId",
  authenticateUser,
  authorizeRoles("user"),
  autoRefundInterCityTransfer
);



export default router;
