

import Tontine from "../models/Tontine.js";
import User from "../models/User.js";
import { sendSMS } from "../services/smsService.js";
import TontineCycle from "../models/TontineCycle.js";
import TontinePayment from "../models/TontinePayment.js";

// ‚úÖ Cr√©er une tontine
export const createTontine = async (req, res) => {
  try {
      const { name, contributionAmount, totalCycles, startDate, frequency } = req.body;
      const initiator = req.user._id;

      // V√©rifier si une tontine avec ce nom existe d√©j√†
      const existingTontine = await Tontine.findOne({ name, initiator });
      if (existingTontine) {
          return res.status(400).json({ msg: "Vous avez d√©j√† une tontine avec ce nom." });
      }

      // Cr√©er la tontine avec un compte virtuel
      const tontine = new Tontine({
          name,
          initiator,
          contributionAmount,
          totalCycles,
          startDate,
          frequency,
          currentCycle: 1,
          status: "active",
          virtualAccount: { balance: 0, currency: "XOF" },
          members: [{ user: initiator, joinedAt: new Date() }] // üîπ Ajout de l'initiateur automatiquement
      });

      await tontine.save();

      // üìÖ Initialiser les cycles
      const cycles = [];
      const initialDate = new Date(startDate);

      for (let i = 0; i < totalCycles; i++) {
          const dueDate = new Date(initialDate);
          if (frequency === "weekly") {
              dueDate.setDate(initialDate.getDate() + i * 7);
          } else if (frequency === "monthly") {
              dueDate.setMonth(initialDate.getMonth() + i);
          }

          const cycle = new TontineCycle({
              tontine: tontine._id,
              cycleNumber: i + 1,
              dueDate,
              isCompleted: false
          });

          await cycle.save();
          cycles.push(cycle);
      }


      // ‚úÖ Initialiser les paiements pour l'initiateur avec `paymentMethod`
const payments = cycles.map((cycle) => ({
  tontine: tontine._id,
  user: initiator,
  cycle: cycle._id,
  amountPaid: 0,
  hasPaid: false,
  paymentDate: null,
  paymentMethod: "compte_virtuel", // üî• Correction : Ajouter un mode de paiement par d√©faut
}));

await TontinePayment.insertMany(payments);


      console.log("‚úÖ Tontine et cycles cr√©√©s avec succ√®s :", tontine);
      return res.status(201).json({ msg: "‚úÖ Tontine et cycles cr√©√©s avec succ√®s.", tontine, cycles });
  } catch (error) {
      console.error("‚ùå Erreur lors de la cr√©ation de la tontine :", error);
      res.status(500).json({ msg: "Erreur serveur." });
  }
};





export const enrollMember = async (req, res) => {
  try {
    const { tontineId } = req.params;
    const { phone } = req.body;
    const initiatorId = req.user._id; // ‚úÖ Utilisateur connect√©

    console.log("üì° Tentative d'enr√¥lement avec le t√©l√©phone :", phone);

    // üîç V√©rifier si l'utilisateur existe et r√©cup√©rer son r√¥le
    const user = await User.findOne({ phone }).select("_id name phone role");

    if (!user) {
      console.error("‚ùå Utilisateur introuvable :", phone);
      return res.status(404).json({ msg: "Utilisateur non trouv√©." });
    }

    if (user.role !== "user") {
      console.error("‚ùå Enr√¥lement refus√© : L'utilisateur n'a pas le r√¥le 'user'.");
      return res.status(403).json({ msg: "Seuls les utilisateurs avec le r√¥le 'user' peuvent √™tre enr√¥l√©s." });
    }

    console.log("‚úÖ Utilisateur trouv√© et valide :", user);

    // ‚úÖ V√©rifier si la tontine existe
    const tontine = await Tontine.findById(tontineId);
    if (!tontine) {
      console.error("‚ùå Tontine non trouv√©e :", tontineId);
      return res.status(404).json({ msg: "Tontine non trouv√©e." });
    }

    // ‚úÖ V√©rifier que le demandeur est bien l‚Äôinitiateur
    if (String(tontine.initiator) !== String(initiatorId)) {
      console.error("‚ùå Acc√®s interdit : seul l‚Äôinitiateur peut enr√¥ler des membres.");
      return res.status(403).json({ msg: "Acc√®s interdit. Seul l‚Äôinitiateur de la tontine peut ajouter des membres." });
    }

    console.log("‚úÖ Tontine trouv√©e :", tontine.name);

    // ‚úÖ V√©rifier si l'utilisateur est d√©j√† enr√¥l√©
    const isAlreadyMember = tontine.members.some((m) => String(m.user) === String(user._id));
    if (isAlreadyMember) {
      return res.status(400).json({ msg: "‚ö†Ô∏è Membre d√©j√† enr√¥l√© dans cette tontine." });
    }

    // üìÖ Initialiser les paiements pour chaque cycle
    const payments = [];
    const cycles = await TontineCycle.find({ tontine: tontineId });

    for (const cycle of cycles) {
      const newPayment = new TontinePayment({
        tontine: tontineId,
        user: user._id,
        cycle: cycle._id,
        amountPaid: 0,
        hasPaid: false,
        paymentDate: null,
        paymentMethod: "compte_virtuel",
      });

      await newPayment.save();
      payments.push(newPayment);

      await TontineCycle.findByIdAndUpdate(
        cycle._id,
        { $push: { payments: newPayment._id } },
        { new: true }
      );
    }

    // ‚úÖ Ajouter le membre
    tontine.members.push({ user: user._id });
    await tontine.save();

    console.log(`‚úÖ Membre ajout√© avec succ√®s : ${user.name} (${user.phone})`);
    res.status(200).json({ msg: "‚úÖ Membre ajout√© avec succ√®s." });

  } catch (error) {
    console.error("‚ùå Erreur lors de l'enr√¥lement du membre :", error);
    res.status(500).json({ msg: "Erreur serveur." });
  }
};


export const getMyTontines = async (req, res) => {
  try {
    const userId = req.user._id;
    console.log(`‚úÖ Utilisateur authentifi√© : ${userId}`);

    // ‚úÖ R√©cup√©rer les tontines o√π l'utilisateur est initiateur
    const tontinesAsInitiator = await Tontine.find({ initiator: userId })
      .populate("initiator", "name phone")
      .lean();

    // ‚úÖ R√©cup√©rer les tontines o√π l'utilisateur est membre
    const tontineIdsAsMember = await TontinePayment.distinct("tontine", { user: userId });
    const tontinesAsMember = await Tontine.find({ _id: { $in: tontineIdsAsMember } })
      .populate("initiator", "name phone")
      .lean();

    // ‚úÖ Fusionner les tontines sans doublons
    const allTontines = [...tontinesAsInitiator, ...tontinesAsMember];
    const tontinesUnique = allTontines.reduce((acc, tontine) => {
      if (!acc.some((t) => String(t._id) === String(tontine._id))) {
        acc.push(tontine);
      }
      return acc;
    }, []);

    // üîπ Associer les cycles et paiements
    for (const tontine of tontinesUnique) {
      // üìÖ Charger les cycles
      tontine.cycles = await TontineCycle.find({ tontine: tontine._id })
        .sort("cycleNumber")
        .lean();

      // üí∞ Charger les paiements de l'utilisateur connect√©
      tontine.payments = await TontinePayment.find({ tontine: tontine._id, user: userId })
        .populate("cycle", "cycleNumber dueDate")
        .lean();
    }


    // üë• R√©cup√©rer les membres de la tontine
    for (const tontine of tontinesUnique) {
      const memberIds = await TontinePayment.distinct("user", { tontine: tontine._id });
      tontine.members = await User.find({ _id: { $in: memberIds } }).select("name phone").lean();
    }

    console.log("‚úÖ Tontines r√©cup√©r√©es avec succ√®s !");
    res.status(200).json(tontinesUnique);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des tontines :", error);
    res.status(500).json({ msg: "Erreur serveur lors de la r√©cup√©ration des tontines." });
  }
};





  export const findUserByPhone = async (req, res) => {
    try {
      const { phone } = req.params;
      console.log("üì° Recherche de l'utilisateur avec t√©l√©phone :", phone);
  
      const user = await User.findOne({ phone });
  
      if (!user) {
        console.warn("‚ö†Ô∏è Aucun utilisateur trouv√© pour :", phone);
        return res.status(404).json({ msg: "Utilisateur non trouv√©." });
      }
  
      console.log("‚úÖ Utilisateur trouv√© :", user);
      res.status(200).json(user);
    } catch (error) {
      console.error("‚ùå Erreur lors de la recherche de l'utilisateur :", error);
      res.status(500).json({ msg: "Erreur serveur." });
    }
  };
  
  
  
// ‚úÖ Fonction pour envoyer une notification apr√®s l'ajout d'un membre
export const sendTontineNotification = async (req, res) => {
    try {
      const { tontineId } = req.params;
      const { phone } = req.body;
  
      if (!phone) {
        return res.status(400).json({ msg: "Num√©ro de t√©l√©phone requis." });
      }
  
      // üîç V√©rifier si l'utilisateur existe
      const user = await User.findOne({ phone }).select("name phone");
      if (!user) {
        return res.status(404).json({ msg: "Utilisateur non trouv√©." });
      }
  
      // üîç V√©rifier si la tontine existe
      const tontine = await Tontine.findById(tontineId);
      if (!tontine) {
        return res.status(404).json({ msg: "Tontine non trouv√©e." });
      }
  
      const message = `üì¢ Salut ${user.name} ! Tu as √©t√© ajout√© √† la tontine "${tontine.name}". 
      Contribution : ${tontine.contributionAmount} XOF | Cycles : ${tontine.totalCycles}.
      Pr√©pare-toi √† cotiser !`;
  
      // ‚úÖ Envoi du SMS
      await sendSMS(user.phone, message);
  
      console.log(`‚úÖ Notification envoy√©e √† ${user.phone} pour la tontine "${tontine.name}"`);
      res.status(200).json({ msg: "‚úÖ Notification envoy√©e avec succ√®s." });
  
    } catch (error) {
      console.error("‚ùå Erreur lors de l'envoi de la notification :", error);
      res.status(500).json({ msg: "Erreur lors de l'envoi de la notification." });
    }
  };







export const getTontineCycles = async (req, res) => {
  try {
    const { tontineId } = req.params;

    // V√©rifier si la tontine existe
    const cycles = await TontineCycle.find({ tontine: tontineId }).sort("cycleNumber");

    if (!cycles.length) {
      return res.status(404).json({ msg: "Aucun cycle trouv√© pour cette tontine." });
    }

    console.log(`‚úÖ Cycles r√©cup√©r√©s pour la tontine ${tontineId}`);
    res.status(200).json(cycles);
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des cycles :", error);
    res.status(500).json({ msg: "Erreur serveur lors de la r√©cup√©ration des cycles." });
  }
};



export const getUserTontines = async (req, res) => {
  try {
      const userId = req.user._id;

      console.log("üì° R√©cup√©ration des tontines pour l'utilisateur :", userId);

      // ‚úÖ Si l'utilisateur est l'initiateur, il voit toutes ses tontines
      const tontinesAsInitiator = await Tontine.find({ initiator: userId })
          .populate("initiator", "name phone")
          .lean();

      // ‚úÖ Si l'utilisateur est un membre, il voit seulement les tontines o√π il est enr√¥l√©
      const tontineIds = await TontinePayment.distinct("tontine", { user: userId });

      const tontinesAsMember = await Tontine.find({ _id: { $in: tontineIds } })
          .populate("initiator", "name phone")
          .lean();

      // ‚úÖ Fusionner les tontines sans doublons
      const allTontines = [...tontinesAsInitiator, ...tontinesAsMember];

      console.log("‚úÖ Tontines r√©cup√©r√©es :", allTontines.length);

      res.status(200).json(allTontines);
  } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des tontines :", error);
      res.status(500).json({ msg: "Erreur serveur lors de la r√©cup√©ration des tontines." });
  }
};



export const getUserTontineDetails = async (req, res) => {
  try {
      const { tontineId } = req.params;
      const userId = req.user._id;

      console.log("üì° R√©cup√©ration des cycles et paiements pour :", userId);

      // ‚úÖ V√©rifier si l'utilisateur est membre de cette tontine
      const isMember = await TontinePayment.exists({ tontine: tontineId, user: userId });

      if (!isMember) {
          return res.status(403).json({ msg: "Vous n'√™tes pas membre de cette tontine." });
      }

      // ‚úÖ R√©cup√©rer les cycles de cette tontine
      const cycles = await TontineCycle.find({ tontine: tontineId }).lean();

      // ‚úÖ R√©cup√©rer les paiements de l'utilisateur
      const payments = await TontinePayment.find({ tontine: tontineId, user: userId })
          .populate("cycle", "cycleNumber dueDate")
          .lean();

      res.status(200).json({ cycles, payments });
  } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration des d√©tails de la tontine :", error);
      res.status(500).json({ msg: "Erreur serveur." });
  }
};



// export const payTontineContribution = async (req, res) => {
//   try {
//       const { tontineId } = req.params;
//       const { userId, cycleId, paymentMethod } = req.body;

//       // ‚úÖ V√©rifier si la tontine existe
//       const tontine = await Tontine.findById(tontineId);
//       if (!tontine) return res.status(404).json({ msg: "Tontine non trouv√©e." });

  

// // ‚úÖ V√©rifier si le cycle existe et son statut
// const cycle = await TontineCycle.findById(cycleId);
// if (!cycle) return res.status(400).json({ msg: "Cycle introuvable." });
// if (cycle.isCompleted) return res.status(400).json({ msg: "Ce cycle est d√©j√† cl√¥tur√©." });

// // ‚úÖ V√©rifier si le cycle pr√©c√©dent est compl√©t√©
// if (cycle.cycleNumber > 1) { 
//     const previousCycle = await TontineCycle.findOne({
//         tontine: tontineId,
//         cycleNumber: cycle.cycleNumber - 1, // V√©rifie le cycle pr√©c√©dent
//     });

//     if (previousCycle && !previousCycle.isCompleted) {
//         return res.status(400).json({ msg: `‚ùå Le cycle ${previousCycle.cycleNumber} doit √™tre compl√©t√© avant de payer ce cycle.` });
//     }
// }






//       // ‚úÖ V√©rifier si le membre fait bien partie de la tontine
//       const user = await User.findById(userId);
//       if (!user) return res.status(404).json({ msg: "Utilisateur non trouv√©." });

//       const existingPayment = await TontinePayment.findOne({ tontine: tontineId, cycle: cycle._id, user: userId });
//       if (!existingPayment) return res.status(400).json({ msg: "Aucun paiement enregistr√© pour cet utilisateur." });
//       if (existingPayment.hasPaid) return res.status(400).json({ msg: "Ce membre a d√©j√† pay√© ce cycle." });

//       // ‚úÖ Calcul du montant √† payer et des frais
//       const contributionAmount = tontine.contributionAmount;
//       const managementFee = (2 / 100) * contributionAmount; // 2% de frais
//       const taxAmount = (19 / 100) * managementFee; // TVA de 19% sur les frais
//       const totalDeduction = managementFee + taxAmount;
//       const netAmount = contributionAmount - totalDeduction;

//       // ‚úÖ V√©rifier le mode de paiement et d√©biter le compte
//       if (paymentMethod === "compte_virtuel") {
//           if (user.virtualAccount.balance < contributionAmount) {
//               return res.status(400).json({ msg: "Fonds insuffisants dans le compte virtuel." });
//           }

//           // üí∞ D√©biter le compte du membre
//           user.virtualAccount.balance -= contributionAmount;
//           await user.save();
//       }

//       // ‚úÖ Ajouter le montant net au compte de la tontine
//       tontine.virtualAccount.balance = (tontine.virtualAccount.balance || 0) + netAmount;
//       tontine.markModified("virtualAccount");
//       await tontine.save();

//       // ‚úÖ Mettre √† jour le paiement enregistr√©
//       existingPayment.amountPaid = contributionAmount;
//       existingPayment.hasPaid = true;
//       existingPayment.paymentDate = new Date();
//       existingPayment.paymentMethod = paymentMethod;
//       existingPayment.managementFee = managementFee;
//       existingPayment.taxAmount = taxAmount;
//       await existingPayment.save();

//       console.log(`‚úÖ Paiement enregistr√© : ${user.name} a pay√© ${contributionAmount} XOF pour le cycle ${cycle.cycleNumber}`);

//       // ‚úÖ V√©rifier si le cycle est en "pending" et passer en "in_progress"
//       if (cycle.status === "pending") {
//           cycle.status = "in_progress";
//           await cycle.save();
//       }

//       // ‚úÖ V√©rifier si tous les membres ont pay√© pour cl√¥turer le cycle
//       const unpaidMembers = await TontinePayment.countDocuments({
//           tontine: tontineId,
//           cycle: cycle._id,
//           hasPaid: false,
//       });

//       if (unpaidMembers === 0) {
//           console.log(`‚úÖ Tous les membres ont pay√© le cycle ${cycle.cycleNumber}.`);

//           // ‚úÖ V√©rifier s'il y a un b√©n√©ficiaire d√©fini pour ce cycle
//           const cycleBeneficiary = tontine.members[cycle.cycleNumber - 1];

//           if (!cycleBeneficiary) {
//               console.warn("‚ö†Ô∏è Aucun b√©n√©ficiaire d√©fini pour ce cycle.");
//           } else {
//               // ‚úÖ R√©cup√©rer le b√©n√©ficiaire
//               const beneficiary = await User.findById(cycleBeneficiary.user);

//               if (!beneficiary) {
//                   console.warn("‚ùå B√©n√©ficiaire introuvable !");
//               } else {
//                   // ‚úÖ V√©rifier si le solde est suffisant avant le transfert
//                   if (tontine.virtualAccount.balance > 0) {
//                       // üí∞ Cr√©diter le compte du b√©n√©ficiaire
//                       beneficiary.virtualAccount.balance += tontine.virtualAccount.balance;
                      
//                       // ‚úÖ Mettre √† jour le solde et enregistrer
//                       await beneficiary.save();
//                       console.log(`‚úÖ ${beneficiary.name} a re√ßu ${tontine.virtualAccount.balance} XOF.`);
                      
//                       // üîÑ R√©initialiser le solde de la tontine pour le cycle suivant
//                       tontine.virtualAccount.balance = 0;
//                       tontine.markModified("virtualAccount");
//                       await tontine.save();
//                   } else {
//                       console.warn("‚ö†Ô∏è Aucune somme disponible √† transf√©rer.");
//                   }
//               }
//           }

//           // ‚úÖ Marquer le cycle comme compl√©t√© et changer son statut
//           cycle.isCompleted = true;
//           cycle.status = "completed";
//           await cycle.save();
//       }


//       // ‚úÖ Passer au cycle suivant s'il en reste
// // ‚úÖ Passer au cycle suivant s'il en reste
// if (tontine.currentCycle < tontine.totalCycles) {
//   tontine.currentCycle += 1;  // üîπ Passer au cycle suivant
//   await tontine.save();
//   console.log(`üîÑ Passage au cycle suivant : Cycle ${tontine.currentCycle}`);
// } else {
//   tontine.status = "completed";  // üîπ Mettre √† jour le statut en "completed"
//   await tontine.save();
//   console.log(`üéâ La tontine "${tontine.name}" est maintenant termin√©e !`);
// }





//       return res.status(200).json({ msg: "Paiement enregistr√© avec succ√®s." });
//   } catch (error) {
//       console.error("‚ùå Erreur lors du paiement :", error);
//       res.status(500).json({ msg: "Erreur serveur lors du paiement." });
//   }
// };



export const payTontineContribution = async (req, res) => {
  try {
    const { tontineId } = req.params;
    const { userId, cycleId, paymentMethod } = req.body;

    // üîé V√©rifier la tontine
    const tontine = await Tontine.findById(tontineId);
    if (!tontine) return res.status(404).json({ msg: "Tontine non trouv√©e." });

    // üîé V√©rifier le cycle
    const cycle = await TontineCycle.findById(cycleId);
    if (!cycle) return res.status(400).json({ msg: "Cycle introuvable." });
    if (cycle.isCompleted) return res.status(400).json({ msg: "Ce cycle est d√©j√† cl√¥tur√©." });

    // üîé Paiement autoris√© uniquement dans le mois du cycle
    const now = new Date();
    const dueDate = new Date(cycle.dueDate);
    const sameMonth =
      now.getFullYear() === dueDate.getFullYear() &&
      now.getMonth() === dueDate.getMonth();

    if (!sameMonth) {
      return res.status(400).json({ msg: "‚ùå Le paiement n‚Äôest autoris√© que pendant le mois du cycle." });
    }

    // üîé V√©rifier le cycle pr√©c√©dent
    if (cycle.cycleNumber > 1) {
      const previousCycle = await TontineCycle.findOne({
        tontine: tontineId,
        cycleNumber: cycle.cycleNumber - 1,
      });
      if (previousCycle && !previousCycle.isCompleted) {
        return res.status(400).json({
          msg: `‚ùå Le cycle ${previousCycle.cycleNumber} doit √™tre compl√©t√© avant de payer ce cycle.`,
        });
      }
    }

    // üîé V√©rifier l'utilisateur
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ msg: "Utilisateur non trouv√©." });

    // üîé V√©rifier le paiement existant
    const existingPayment = await TontinePayment.findOne({
      tontine: tontineId,
      cycle: cycle._id,
      user: userId,
    });
    if (!existingPayment) return res.status(400).json({ msg: "Aucun paiement enregistr√© pour cet utilisateur." });
    if (existingPayment.hasPaid) return res.status(400).json({ msg: "Ce membre a d√©j√† pay√© ce cycle." });

    // ‚úÖ Calcul du montant et des frais
    const contributionAmount = tontine.contributionAmount;
    const managementFee = (2 / 100) * contributionAmount;
    const taxAmount = (19 / 100) * managementFee;
    const totalDeduction = managementFee + taxAmount;
    const netAmount = contributionAmount - totalDeduction;

    // ‚úÖ Paiement depuis le compte virtuel
    if (paymentMethod === "compte_virtuel") {
      if (user.virtualAccount.balance < contributionAmount) {
        return res.status(400).json({ msg: "Fonds insuffisants dans le compte virtuel." });
      }
      user.virtualAccount.balance -= contributionAmount;
      await user.save();
    }

    // ‚úÖ Cr√©diter le compte de la tontine
    tontine.virtualAccount.balance += netAmount;
    await tontine.save();

    // ‚úÖ Mettre √† jour le paiement
    existingPayment.amountPaid = contributionAmount;
    existingPayment.hasPaid = true;
    existingPayment.paymentDate = new Date();
    existingPayment.paymentMethod = paymentMethod;
    existingPayment.managementFee = managementFee;
    existingPayment.taxAmount = taxAmount;
    await existingPayment.save();

    // ‚úÖ Mettre √† jour le statut du cycle
    if (cycle.status === "pending") {
      cycle.status = "in_progress";
      await cycle.save();
    }

    // ‚úÖ Si tous ont pay√© ‚Üí distribuer au b√©n√©ficiaire
    const unpaidCount = await TontinePayment.countDocuments({
      tontine: tontineId,
      cycle: cycle._id,
      hasPaid: false,
    });

    if (unpaidCount === 0) {
      const cycleBeneficiary = tontine.members[cycle.cycleNumber - 1];
      if (cycleBeneficiary) {
        const beneficiary = await User.findById(cycleBeneficiary.user);
        if (beneficiary && tontine.virtualAccount.balance > 0) {
          beneficiary.virtualAccount.balance += tontine.virtualAccount.balance;
          await beneficiary.save();

          // R√©initialiser le solde de la tontine
          tontine.virtualAccount.balance = 0;
          await tontine.save();

          console.log(`üéâ ${beneficiary.name} a re√ßu ${contributionAmount} XOF.`);
        }
      }

      // Cl√¥turer le cycle
      cycle.isCompleted = true;
      cycle.status = "completed";
      cycle.completedAt = new Date();
      await cycle.save();
    }

    // ‚úÖ Passer au cycle suivant ou terminer
    if (tontine.currentCycle < tontine.totalCycles) {
      tontine.currentCycle += 1;
      await tontine.save();
    } else {
      tontine.status = "completed";
      await tontine.save();
    }

    return res.status(200).json({ msg: "‚úÖ Paiement enregistr√© avec succ√®s." });

  } catch (error) {
    console.error("‚ùå Erreur lors du paiement :", error);
    return res.status(500).json({ msg: "Erreur serveur lors du paiement." });
  }
};


export const closeTontineCycle = async (tontine, cycle) => {
  try {
    console.log(`üîÑ Cl√¥ture du cycle ${cycle.cycleNumber} pour la tontine ${tontine.name}...`);

    // ‚úÖ Trouver le b√©n√©ficiaire du cycle (ordre d‚Äôenr√¥lement)
    const members = tontine.members.sort((a, b) => a.joinedAt - b.joinedAt);
    const beneficiaryIndex = (cycle.cycleNumber - 1) % members.length;
    const beneficiary = await User.findById(members[beneficiaryIndex].user);

    if (!beneficiary) {
      console.error("‚ùå Impossible de trouver le b√©n√©ficiaire du cycle.");
      return;
    }

    // ‚úÖ Transf√©rer les fonds au b√©n√©ficiaire
    const collectedAmount = tontine.virtualAccount.balance;
    tontine.virtualAccount.balance = 0; // Remettre √† z√©ro apr√®s paiement
    await tontine.save();

    // ‚úÖ Cr√©diter le compte virtuel du b√©n√©ficiaire
    beneficiary.virtualAccount.balance += collectedAmount;
    await beneficiary.save();

    // ‚úÖ Marquer le cycle comme termin√©
    cycle.isCompleted = true;
    await cycle.save();

    console.log(`‚úÖ Cycle ${cycle.cycleNumber} termin√© : ${beneficiary.name} a re√ßu ${collectedAmount} XOF.`);

    // ‚úÖ Passer au cycle suivant
    tontine.currentCycle += 1;
    if (tontine.currentCycle > tontine.totalCycles) {
      tontine.status = "completed";
    }
    await tontine.save();

    // ‚úÖ Envoyer une notification au b√©n√©ficiaire
    const message = `üéâ F√©licitations ${beneficiary.name} ! Vous avez re√ßu ${collectedAmount} XOF dans la tontine "${tontine.name}".`;
    await sendSMS(beneficiary.phone, message);

  } catch (error) {
    console.error("‚ùå Erreur lors de la cl√¥ture du cycle :", error);
  }
};





export const getActiveTontinesCount = async (req, res) => {
  try {
    const activeTontinesCount = await Tontine.countDocuments({ status: "active" });
    res.status(200).json({ activeTontinesCount });
  } catch (error) {
    console.error("‚ùå Erreur lors de la r√©cup√©ration des tontines actives :", error);
    res.status(500).json({ msg: "Erreur serveur." });
  }
};



export const assignCycleBeneficiary = async (req, res) => {
  try {
    const { tontineId, cycleId } = req.params;
    const { beneficiaryId } = req.body;
    const userId = req.user._id;

    const tontine = await Tontine.findById(tontineId);
    if (!tontine) return res.status(404).json({ msg: "Tontine non trouv√©e." });

    // V√©rifier que c'est l'initiateur
    if (String(tontine.initiator) !== String(userId)) {
      return res.status(403).json({ msg: "Seul l‚Äôinitiateur peut d√©signer un b√©n√©ficiaire." });
    }

    const cycle = await TontineCycle.findById(cycleId);
    if (!cycle || String(cycle.tontine) !== tontineId) {
      return res.status(404).json({ msg: "Cycle introuvable." });
    }

    if (cycle.isCompleted || cycle.beneficiary) {
      return res.status(400).json({ msg: "Ce cycle est d√©j√† compl√©t√© ou a un b√©n√©ficiaire." });
    }

    // V√©rifier que tous les membres ont pay√©
    const unpaid = await TontinePayment.countDocuments({
      tontine: tontineId,
      cycle: cycleId,
      hasPaid: false,
    });

    if (unpaid > 0) {
      return res.status(400).json({ msg: "Tous les membres n'ont pas encore pay√© ce cycle." });
    }

    const beneficiary = await User.findById(beneficiaryId);
    if (!beneficiary) return res.status(404).json({ msg: "B√©n√©ficiaire introuvable." });

    // V√©rifier que ce membre n‚Äôa pas encore √©t√© b√©n√©ficiaire
    const alreadyBeneficiary = tontine.beneficiaries.includes(beneficiaryId);
    if (alreadyBeneficiary) {
      return res.status(400).json({ msg: "Ce membre a d√©j√† re√ßu sa part." });
    }

    const amountToTransfer = tontine.virtualAccount.balance || 0;
    if (amountToTransfer <= 0) {
      return res.status(400).json({ msg: "Aucun fond disponible √† transf√©rer." });
    }

    // üí∏ Transf√©rer au b√©n√©ficiaire
    beneficiary.virtualAccount.balance += amountToTransfer;
    await beneficiary.save();

    // ‚úÖ Mettre √† jour la tontine
    tontine.virtualAccount.balance = 0;
    tontine.beneficiaries.push(beneficiaryId);
    await tontine.save();

    // ‚úÖ Mettre √† jour le cycle
    cycle.beneficiary = beneficiaryId;
    cycle.isCompleted = true;
    cycle.status = "completed";
    await cycle.save();

    res.status(200).json({
      msg: "‚úÖ B√©n√©ficiaire assign√© et paiement transf√©r√©.",
      beneficiary: {
        name: beneficiary.name,
        phone: beneficiary.phone,
        amount: amountToTransfer,
      },
    });
  } catch (error) {
    console.error("‚ùå Erreur lors de l‚Äôassignation du b√©n√©ficiaire :", error);
    res.status(500).json({ msg: "Erreur serveur lors de l‚Äôassignation." });
  }
};


